                                 ========SO THIS IS THE NOTE FOR EVENTS CONCEPTS========
                                       +++++++++++++EVENT HANDLING+++++++++++++
Definition:: an event in js is anything that happens in the browser that your code can respond to for eg. clicking a button, typing on the keyboard, scrolling the page, submitting the form and many more others.
event handling is a fundamental concept in js particulary in web dev where it allows scipts to respond to user interactions or browser triggered occurrences.
event handling involves : detecting an event
                        : attaching a handler
                        : processing the event
event handling types : mouse events : click
                                    : dblclick
                                    : contextmenu and many more
                     : keyboard events : keydown
                                       : keypress
                                       : keyup
                     : form events : submit
                                   : focus
                                   : blur
how to handle events??
there are three ways 
1. inline html handlers
2. dom property handlers
3. addEventListener()
                                                  1. inline html handlers
=here you write javascipt directly inside the html tag
=it is very simple and quick
=good for small, one time events
=it is a bad practice in large project because it mix html and js
=it is hard to maintain for big application
=cant easily attach multiple handlers to the same events
=secuity risks in dynamic html
=potential of global scare pollution 
                                                  2. dom property handlers
=the dom property handler involves assigning a function directly to an element event property via js.
=here you selectt the element using the dom api like getelementbyid and set the property like onclick
=only one handler per event type per element (assigning a new one overwrites the old)
=keeps js separate from html and easy to understand
                                                  3. addEventListerner() 
=this method is modern, recommended approach for attaching event handlers.
=it's part of the dom level 2 events api and allow flexible, non overwritten attachments
=supports multiple handlers without overwriting to the same element
=event delegation friendly
=it is standard and cross browser
=can remove listeners using removeEventListener()

                                          ++++++++++++++++++EVENT OBJECT+++++++++++++++++++
an event object is a data structure that holds information about a specific event that allows developers to access properties and methods related to that event.
when an event happens like a user cliking a button or anything, the browser or a program creates an event object.
this object is then passed to the function that is designed to handle that event.
=-= an event object typically has several important properties that provide details about the event
 -= property        |description
 -= type             the type of event, eg click, keydown
 -= key/keycode      in keyboard events, this tells you which key was pressed eg you pressed Enter retuns Enter          
 -= target           the dom element that triggered the event, eg cliking the span inside the button target is span
 -= currentTarget    the element the event listener is attached to, eg listener is on button so currentTarget is button
 -= clientX clientY  these give the horizontal and vertical coordinates of the mouse pointer when the event happened relative to the browser window, eg you click top left of screen
 -= bubbles          boolean indicating if the event bubbles up through the dom, eg click bubbles up to parent ie true
 -= cancelable       boolean indicating if the event default action can be prevented, eg form submit can be stopped ie true
 -= defaultPrevented whether preventDefault() was called, eg you called preventDefault() ie true
 -= timeStamp        the time(in ms) when the event was created, you click at 12:00:01:123 ie timestamp show that
 -= preventDafault() cancels the event default behaviour eg stopping a form submission, eg stops link from navigating
 -= stopPropagation()prevents the event from bubbling up the dom, eg stops click from reaching parent

                                        
                                         +++++++++++++++++++EVENT PROPAGATION++++++++++++++++++
event propagation also known as event flow/event bubbling and capturing
event propagation describes the order in which an event moves through the dom when a user interacts with a webpage.
when an event is fired on a target element it does not just stop there it propagates through related elements in a predictable path. this allow parent, child and sibling elements to respond to the event without needing to attach handlers directly to the target.
event propagation is crucial for 
=efficient event handling:attach listeners to a common ancestor to handle events from many descendants
=ui interaction:enabling behaviour like closing modals on outside clicks or form validation on nested inputs
=debuggging:understanding why an event seems to leak to unintended elements.
event propagation describes the way events travel through the dom after they are triggered. it consist of three phases:
1.capturing phase also called trickling phase
2.target phase
3.bubbling phase

















                     
