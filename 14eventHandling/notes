                                 ========SO THIS IS THE NOTE FOR EVENTS CONCEPTS========
                                       +++++++++++++EVENT HANDLING+++++++++++++
Definition:: an event in js is anything that happens in the browser that your code can respond to for eg. clicking a button, typing on the keyboard, scrolling the page, submitting the form and many more others.
event handling is a fundamental concept in js particulary in web dev where it allows scipts to respond to user interactions or browser triggered occurrences.
event handling involves : detecting an event
                        : attaching a handler
                        : processing the event
event handling types : mouse events : click
                                    : dblclick
                                    : contextmenu and many more
                     : keyboard events : keydown
                                       : keypress
                                       : keyup
                     : form events : submit
                                   : focus
                                   : blur
how to handle events??
there are three ways 
1. inline html handlers
2. dom property handlers
3. addEventListener()
                                                  1. inline html handlers
=here you write javascipt directly inside the html tag
=it is very simple and quick
=good for small, one time events
=it is a bad practice in large project because it mix html and js
=it is hard to maintain for big application
=cant easily attach multiple handlers to the same events
=secuity risks in dynamic html
=potential of global scare pollution 
                                                  2. dom property handlers
=the dom property handler involves assigning a function directly to an element event property via js.
=here you selectt the element using the dom api like getelementbyid and set the property like onclick
=only one handler per event type per element (assigning a new one overwrites the old)
=keeps js separate from html and easy to understand
                                                  3. addEventListerner() 
=this method is modern, recommended approach for attaching event handlers.
=it's part of the dom level 2 events api and allow flexible, non overwritten attachments
=supports multiple handlers without overwriting to the same element
=event delegation friendly
=it is standard and cross browser
=can remove listeners using removeEventListener()

                                          ++++++++++++++++++EVENT OBJECT+++++++++++++++++++
an event object is a data structure that holds information about a specific event that allows developers to access properties and methods related to that event.
when an event happens like a user cliking a button or anything, the browser or a program creates an event object.
this object is then passed to the function that is designed to handle that event.
=-= an event object typically has several important properties that provide details about the event
 -= property        |description
 -= type             the type of event, eg click, keydown
 -= key/keycode      in keyboard events, this tells you which key was pressed eg you pressed Enter retuns Enter          
 -= target           the dom element that triggered the event, eg cliking the span inside the button target is span
 -= currentTarget    the element the event listener is attached to, eg listener is on button so currentTarget is button
 -= clientX clientY  these give the horizontal and vertical coordinates of the mouse pointer when the event happened relative to the browser window, eg you click top left of screen
 -= bubbles          boolean indicating if the event bubbles up through the dom, eg click bubbles up to parent ie true
 -= cancelable       boolean indicating if the event default action can be prevented, eg form submit can be stopped ie true
 -= defaultPrevented whether preventDefault() was called, eg you called preventDefault() ie true
 -= timeStamp        the time(in ms) when the event was created, you click at 12:00:01:123 ie timestamp show that
 -= preventDafault() cancels the event default behaviour eg stopping a form submission, eg stops link from navigating
 -= stopPropagation()prevents the event from bubbling up the dom, eg stops click from reaching parent
ðŸŒŸto understand properties so well watch out the js code of file of event. 
                                        
                                         +++++++++++++++++++EVENT PROPAGATION++++++++++++++++++
event propagation also known as event flow/event bubbling and capturing
event propagation describes the order in which an event moves through the dom when a user interacts with a webpage.
when an event is fired on a target element it does not just stop there it propagates through related elements in a predictable path. this allow parent, child and sibling elements to respond to the event without needing to attach handlers directly to the target.
event propagation is crucial for 
=efficient event handling:attach listeners to a common ancestor to handle events from many descendants
=ui interaction:enabling behaviour like closing modals on outside clicks or form validation on nested inputs
=debuggging:understanding why an event seems to leak to unintended elements.
event propagation describes the way events travel through the dom after they are triggered. it consist of three phases:
1.capturing phase also called trickling phase or downward phase
2.target phase
3.bubbling phase also called upward phase
these phases ensure events can be intercepted and handled at multiple levels of the dom hierarchy.
document â†’ html â†’ body â†’ parent â†’ child â†’ target
           â†“ Capturing
           â†’ Target
           â†‘ Bubbling
                                                         1.capturing/trickling phase
here the event trickles down from the outermost ancestor (dom root) toward the target element, visiting each ancestor in the hirerchy. this allow outer elements to capture the event before it reaches the target.
direction is top to down(from document to target)
only triggered if addEventListerner uses {capture: true}
intercept events before they reach the target
so if event listerner are registered with addEventListener(event, handler, true), the event will be caught during this phase.
but here the third parameter is true which actually is capture: true which role in addEventListerner() is to call changes the event flow from bubbling to capturing and by default capture: false until manually changed it to true.
                                                                2.target phase
this is the phase where the event has reached the actual element that was interacted with (the target element)
the event.target property points here
all phases overlap here if the target has handlers
both capturing and bubbling listners can affect this phase depending on how they are registered
                                                               3.bubbling phase
after the target element is triggered, the event then bubbles up (travels back upward) through the DOM tree, from the target parent->ancestor->document
direction is down to up(from target to root/document)
if event listerner are registered without the true parameter (addEventListener(event, handler, false) or default), they work during this phase.
it is very useful  event delegation (attaching one listener on a parent instead of multiple children)

difference between::== 
event.target : identifying which child element was clicked or interacted with.
event.currentTarget : always points to the element where the listener is attached, regardless of where the event originated or which element triggered it.
this : referes to the context in which the function is executed. inside an event listener, this points to the element to which the event listener was attached(the element where addEventListerner was used)

how to stop bubbling and capturing:==:
stopPropagation()=
 its purpose is to prevents the event from bubbling up or capturing down the DoM tree but does not stop other listener on the same element
 eg. imagine you have a button inside a box. when you click the button you want only the button
     click action to happen. you dont want the box click action to happen as well. using this mehtod
     on the button click event will stop the event from bubbling up to the box.
 but but but stopPropagation() only stops the bubbling and capturing to the next element but if the there is a element with more than one eventlisterer attached to it then stopPropagation() not stop those eventlistener

stopImmediatePropagation()=
 this method does everything stopPropagation() does but with one extra step: it also stops any other event listerners on the same element from running.
 eg. let say you have the same button but you have two separate click actions attached to it. if 
     you use stopImmediatePropagation() on the first click action, the event will not only stop 
     bubbling up to the box, but it will also stop the second click action on the button from ever running.

                                                                         ==EVENT DELEGATION==
event delegation is a design pattern in javascript for handling events. instead of adding a separate event listener to every single element on a web page, you add just one event listener to a common parent element.
when a child element is clicked the event bubbles up to the parent the parent event listener then identifies which child was clicked and handles the event accordingly this is much more efficient in case of long list of event handling
                      how it works:
attach one listener
event bubbles up
identify the target
handle the event
                      why it works:
js events bubbles up the dom tree. so if a child element is clicked the event travels up to its parent, grandparent etc you can intercept it at any level.
                       why use it:
better performance
dynamic element
cleaner code
see the code for better understanding in js html event file

so at all event delegation is used to reduce overhead by managing event listener in the elements as just adding the event listener to the parent and accessing or performing actions through this listerner to the child elements of the parent.















                     
