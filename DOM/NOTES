                                                  =DEFINITON OF DOM=
the dom is a programming interface that lets javascript interact with and manipulate the content, structure and style of a web page.
actually when any browser loads a webpage, it turns the html into a tree like structure where each elements like <div>, <spin>,<form> etc becomes a node in that tree. and after that javascript can access element, change content, modify style, add and remove elements and other operation.



                                                    ====BASICS====
Document object is available inside-
window object which means window object is the global container for everything in a browser tab and the document object is a property of window that actually represents the html page. inshort document is a child of window.
window object is the global object for the browser enviroment. 
window object represents the browser window or tab that displays you web page.
window object is like the master controller.
window object holds everything like the page, the script, time, alerts and more.
all global variables and functions become properties of window.
we can reach the document via window.document and it includes 
    [window.alert()] [window.setTimeout()] [window.location] [window.history] and more....

DOMNODE contains any item in the dom tree including element text comment 
HTMLELEMENT contains specific type of node representing an HTML tag
DOMNODE type is node
HTMLELEMENT type is html element
DOMNODE includes tags, text, comments,attributes etc
HTMLELEMENT includes only  html tags like <h1><div><p>
DOMNODE accessed via childNodes, firstChild, nextSibling
HTMLELEMENT accessed via getElementByTagName, querySelector

DOM represents the html document as tree    BOM represents the browser enviroment outside html document
DOM main object is document                 BOM main object is window
DOM manipulate page content/style           BOM control browser behavior 
DOM allow js to operate with html & css     BOM interact with the browser window, tabs & navigator

NODELIST is a collection of nodes(elements,texts,comments) extracted from a document
NODELIST is like array but not a array.
NODELIST is usually static(except childNodes).
NODELIST has two type live NODELIST and static NODELIST where in livenodelist it automatically updates the list whenever the DOM changes and in the staticnodelist it takes the snapshot of nodes at the time the query was made not updated with DOM changes.
LIVENODELIST eg element.childNodes and STATICNODELIST eg document.querySelectorAll()
SOMEWHERE LINE 28 TO LINE 44 in the js code file the nodelist code with explanation for clearity
NODELIST can be convert into array by using Array.from().
NODELIST is returned by querySelectorAll, childNodes

HTMLCOLLECTION is a live collection of html elements returned by certain dom methods.
HTMLCOLLECTION updates automatically when the dom changes.
HTMLCOLLECTION is live-auto updates with dom changes unlike NODELIST.
HTMLCOLLECTION cannot use array methods, foreach() loop.
HTMLCOLLECTION cannot change style directly but can using loop like for, for..of
HTMLCOLLECTION is returned by getElementByTagName, getElementByClassName
HTMLCOLLECTION convert to array with Array.from()


                                                  ==SELECTION OF HTML==
the dom is a tree like structure that represents all elements of your HTML document and in js we can access, select and manipulate these elements using different seletion methods
1. getElementById() returns single element, HTML ELEMENT , not a collection
2. getElementsByTagName() returns multiple html elements, HTML COLLECTION, it is live
3. getElementsByClassName() returns multiple html elements, HTML COLLECTION, it is live
4. querySelector() returns first matching element, return ELEMENT or null
5. querySelectorAll() returns all matching nodes, NODELIST, static, not a collection
                                                   1.getElementById()
this method is used to select a single html element using its id attribute.
the id must be unique in html and this method always returns one element only.
it has the fastest performance
it does not accepts css selectors like #,.,tag
                                                 2.getElementByTagName()
this method selects all elements with a given html tag name.
it returns an HTMLCOLLECTION array like object not a real array.
it is live
it has fast performance
no css selector
                                                 3.getElementByClassName()
this method selects all elements with a specific class name
it returns an HTMLCOLLECTION
it is live
it has fast performance
no css selector
                                                   4.querySelector()
this method selects the first matching element based on css selector
it returns an element object and null if no match
it returns a single element
it is static
it has a medium performance
it is a modern and powerful selector
full css selector
check out the code of it in js file 
document.querySelector can be implemented as using ID, class, tag, attribute, nested, pseudo-class
                                                  5.querySeletorAll()
this method is the collection version of querySelector 
it returns all elements matching a css selector
it returns a static nodelist of element object
it  has a medium performance
its collection type is nodelist(includes only elements, no text/comments)
full css selector
check out the  code of it in js file
üåüüåüTIP=== querySelector()>> querySelectorAll()>> getElementById()>> getElementByClassName()>> getElementByTagName()


                                                   ==MANIPULATING THE HTML==
this allow you to dynamically change the  content, structure and behavior of your web pages
like changing content, structure, attributes

1.TAGNAME     = this is a read only property of element nodes that returns the html tag name like "DIV" in uppercase.
              = this only available on element node not text or comment nodes
              = it is a case insensitive in html but always uppercase in output

2.NODENAME    = this is a read only name of the nodes in uppercase for element nodes
              = it works for all node types (element, text, comment)
              = getter only, broader than tagname, ideal for mixed node types

3.INNERTEXT   = this returns or set the visible text inside an element with formatting
              = it is slower than TEXTCONTENT
              = it skip the  text which is not visible for eg where display: none style is used
              = non standard but supported in all major browser

4.TEXTCONTENT = this returns or set the text content of an element and its descendants without formatting 
              = it does not consider css styles i.e. hidden text is included
              = faster than innertext and it is standard
              = it preserves whitespace exactly.  

5.INNERHTML   = this returns html content (tags+text) inside the element without formatting
              = it allow you to add/change multiple child elements at once
              = it can insert tag, script etc
              = powerful but risky

                                                ==INSERTION/ADDITION OF ELEMENTS==
when working with js and the dom we often need to add new elements or html content dynamically. this is  called  dom manipulation.
>two major steps are followed to add element 
STEP1:
before you can insert anything you need to create it and for that we typically use: .createElement("")
STEP2:
once you have the element there are several ways to insert it relative to other node
1. node.append(elem) : adds at the end of node (inside)
2. node.prepend(elem) : adds at the start of node (inside)
3. node.after(elem) : adds after the node (outside)
4. node.before(elem) : adds before the node (outside)
5. node.inserAdjacentElement(position, elem) : positon can be ‚Äúbeforebegin‚Äù, ‚Äúafterbegin‚Äù, ‚Äúbeforeend‚Äù, ‚Äúafterend‚Äù
üåüand all of it moves the existing element
üåüall are non-destructive and reuses the same node which means that if you are appending is already part of another parent, calling append() will move it instead of cloning or deleting it.
1. node.append(elem) = adds one or more element/text nodes at the end of the selected node(inside it)
                     = it is non-destructive means that if you are appending is already part of another parent, calling append() will move it instead of cloning or deleting it.
                     = it resuses the same node
2. node.prepend(elem)= adds one or more element/text nodes at the start of the selected node(inside it)
3. node.before(elem) = adds one or more element/text nodes immediately after the node as previous sibling(outside it)
4. node.after(elem)  = adds one or more element/text nodes immediately before the node as previous siblings(outside it)
5. node.insertAdjacentElement(position,elem) = insert a single element at the specified position relative to the node.
                                             = positions are string
                                             ="beforebegin": Before the node (previous sibling)(outside).
                                             ="afterbegin": Inside the node, as first child.
                                             ="beforeend": Inside the node, as last child.
                                             ="afterend": After the node (next sibling)(outside).
                                             =E.g., node.insertAdjacentElement('afterend', elem);. Older method, but precise.
6.node.remove() : removes the node from its parent 
                : it is modern and simple; no return value
                : node.replaceWith() can remove by replacing with nothing but better to use remove().


                                                        ==PARENT NODE RELATED CONCEPT==
In DOM every node such as elements, text nodes, comments etc can have a hierarchical relationship with other nodes. The parentnode property and related methods allow you to navigate and manipulate this hierarchy, specially focusing on parent-child relationships.
These are part of the core DOM API in javascript, enabling dynamic updates to the page structure without reloading.
1. node.parentNode: it returns the immediate parent of a given node in the DOM tree
                  : this is a read only property
                  : it returns type is a node object which could be a element(<div>) or the document object(<html>)
                  : üåüparentNode vs parentElement the parentNode works with any type of node, including text, comments, document nodes but the parentElement works with only HTML element which can be get by document.getElementById("")
üåünow below methods can be use on a parent node to manipulate its children 
üåüthese all are node only methods 
üåüand also all of the below methods are destructive in the sense that they modify the existing DOM tree by removing or replacing a node from its original position. actually non cloning, it is unlike of addition of element the topic is just before it.
2. parent.replaceChild(newChild, oldChild): replaces an existing child node from the dom tree with a new node, meaning the old child is no longer part of the visible document structure and it completely remove from the memory if there no other refernces of it like variable of something in your code.
                                          : works only with node objects(not strings) which means you must pass actual DOM nodes(like elements or text nodes) to replaceChild() you cannot pass "hello" or "<p>hello<p>" as a string it wont work.
3. parent.appendChild(child): it adds a child node at the end of the parent children list
                            : it returns the appended node
                            : it works only with node objects no direct string support
4. parent.insertBefore(newNode, referenceNode): it insert a new node before a specified reference child. if referenceNode is null, it acts like appendChild (adds to end)
                                              : it returns the inserted newNode
5. parent.removeChild(child): it removes the specified child from the parent
                            : it returns the removed node
                            : works with node references(you cannot pass a string)
 






